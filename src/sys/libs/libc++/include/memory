#ifndef LIBCPP_MEMORY
#define LIBCPP_MEMORY

/*! \addtogroup libcpp libc++ */
/*@{*/

#include <cstddef>

namespace std
{
	template <class T> class allocator;
	
	/*! Standard allocator template class specialized for void */
	template<>
	class allocator<void>
	{
		public:
			typedef void *			pointer;
			typedef const void *	const_pointer;
			typedef void			value_type;
			
			template<class U>
			struct rebind
			{
				typedef allocator<U> other;
			};
	};
	
	/*! Standard allocator template class */
	template<class T>
	class allocator
	{
		public:
			typedef T				value_type;
			typedef T*				pointer;
			typedef const T *		const_pointer;
			typedef T &				reference;
			typedef const T &		const_reference;
			typedef size_t			size_type;
			typedef ptrdiff_t		difference_type;
			
			/*! The constructor */
			inline allocator() throw(){}
			/*! The copy-constructor */
			inline allocator(const allocator &a) throw(){}
			/*! Get the address
			 *\param[in] x reference to the object
			 *\return pointer to the object */
			inline pointer address(reference x) const{return &x;}
			/*! Get the address
			 *\param[in] x const reference to the object
			 *\return const pointer to the object */
			inline const_pointer address(const_reference x) const{return &x;}
			inline pointer allocate(size_type n, allocator<void>::const_pointer hint = 0)
			{
				//TODO
			}
			void deallocate(pointer p, size_type n);
			/*!\todo */
			size_type max_size() const;
			inline void construct(pointer p, const_reference val)
			{
				new (static_cast<void*>(p)) T(val);
			}
			inline void destroy(pointer p)
			{
				p->~T();
			}
			/*! The destructor */
			inline ~allocator() throw(){}
	};
	
	/*! Standard auto_ptr class */
	template<class T>
	class auto_ptr
	{
		public:
			/*! The constructor */
			explicit auto_ptr(T *p = 0) throw()
			{
				instance = p;
			}
			/*! Copy constructor */
			auto_ptr(auto_ptr &p) throw()
			{
				instance = p.instance;
				p.instance = 0;
			}
			/*! The destructor */
			~auto_ptr() throw()
			{
				if (instance != 0)delete instance;
			}
			/*! = operator */
			void operator = (auto_ptr &p) throw()
			{
				instance = p.instance;
				p.instance = 0;
			}
			/*! * operator */
			T &operator* () const throw()
			{
				return *instance;
			}
			/*! -> operator */
			T *operator-> () const throw()
			{
				return instance;
			}
			/*! Get the pointer */
			T *get() const throw(){return instance;}
			/*! Release the pointer */
			T *release() throw()
			{
				T *tmp = instance;
				instance = 0;
				return tmp;
			}
			/*! Set new pointer */
			T *reset(T *p = 0) throw()
			{
				T *tmp = instance;
				instance = p;
				return tmp;
			}
		private:
			/*! The instance */
			T *instance;
	};
	
	/*! auto_array class
	 *\note lightOS libc++ extension */
	template<class T>
	class auto_array
	{
		public:
			/*! The constructor */
			explicit auto_array(T *p = 0) throw()
			{
				instance = p;
			}
			/*! Copy constructor */
			auto_array(auto_array &p) throw()
			{
				instance = p.instance;
				p.instance = 0;
			}
			/*! The destructor */
			~auto_array() throw()
			{
				if (instance != 0)delete []instance;
			}
			/*! = operator */
			void operator = (auto_array &p) throw()
			{
				instance = p.instance;
				p.instance = 0;
			}
			/*! * operator */
			T &operator* () const throw()
			{
				return *instance;
			}
			/*! -> operator */
			T *operator-> () const throw()
			{
				return instance;
			}
			/*! Get the pointer */
			T *get() const throw(){return instance;}
			/*! Release the pointer */
			T *release() throw()
			{
				T *tmp = instance;
				instance = 0;
				return tmp;
			}
			/*! Set new pointer */
			T *reset(T *p = 0) throw()
			{
				T *tmp = instance;
				instance = p;
				return tmp;
			}
		private:
			/*! The instance */
			T *instance;
	};
};

/*@}*/

#endif
