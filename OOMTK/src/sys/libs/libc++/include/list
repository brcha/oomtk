#ifndef LIBCPP_LIST
#define LIBCPP_LIST

/*! \addtogroup libcpp libc++ */
/*@{*/

#include <cstddef>
#include <memory>

namespace std
{
	/*!\todo docu */
	template<class T, class Allocator = allocator<T> >
	class list
	{
		public:
			typedef typename Allocator::reference								reference;
			typedef typename Allocator::const_reference							const_reference;
			//TODO
			typedef size_t														size_type;
			//TODO
			typedef T															value_type;
			typedef Allocator													allocator_type;
			typedef typename Allocator::pointer									pointer;
			typedef typename Allocator::const_pointer							const_pointer;
			
		private:
			struct data
			{
				T data;
				struct data *next;
				struct data *prev;
			};
			
		public:
			class list_iterator
			{
				friend class list;
				public:
					/*! The copy-constructor */
					inline list_iterator(const list_iterator &x):mData(x.mData){}
					/*! The = operator */
					inline list_iterator &operator = (const list_iterator &x)
					{
						mData = x.mData;
						return *this;
					}
					/*! The == operator */
					inline bool operator == (const list_iterator &x)
					{
						if (mData != x.mData)return false;
						return true;
					}
					/*! The != operator */
					inline bool operator != (const list_iterator &x){return !(*this == x);}
					/*! The unary * operator */
					inline const_reference operator *() const{return mData->data;}
					/*! The unary * operator */
					inline reference operator *(){return mData->data;}
					/*! The -> operator */
					inline reference operator ->(){return mData->data;}
					/*! The -> operator for const objects */
					inline const_reference operator ->() const{return mData->data;}
					/*! The prefix ++ operator */
					inline list_iterator &operator ++ (){mData = mData->next;return *this;}
					/*! The prefix ++ operator */
					inline list_iterator &operator -- (){mData = mData->prev;return *this;}
					/*! The postfix ++ operator */
					inline list_iterator operator ++ (int)
					{
						list_iterator tmp(mData);
						++(*this);
						return tmp;
					}
					/*! The postfix -- operator */
					inline list_iterator operator -- (int)
					{
						list_iterator tmp(mData);
						--(*this);
						return tmp;
					}
				protected:
					inline list_iterator(list::data *data):mData(data){}
				private:
					list::data *mData;
			};
			
			typedef list_iterator												iterator;
			typedef const list_iterator											const_iterator;
			
			inline explicit list()
				: mFront(0), mBack(0), n(0){}
			inline explicit list(size_type n, const T &value = T())
				: mFront(0), mBack(0), n(0)
			{
				for (unsigned int i=0;i < n;i++)push_back(value);
			}
			inline iterator begin(){return iterator(mFront);}
			inline const_iterator begin() const{return const_iterator(mFront);}
			inline iterator end(){return iterator(0);}
			inline const_iterator end() const{return const_iterator(0);}
			inline reference front(){return mFront->data;}
			inline const_reference front() const{return mFront->data;}
			inline reference back(){return mBack->data;}
			inline const_reference back() const{return mBack->data;}
			inline size_type size() const{return n;}
			inline bool empty() const{return (n == 0);}
			void pop_back()
			{
				if (mBack != 0)
				{
					data *node = mBack;
					mBack = mBack->prev;
					if (mBack == 0)mFront = 0;
					--n;
					delete node;
				}
			}
			void pop_front()
			{
				if (mFront != 0)
				{
					data *node = mFront;
					mFront = mFront->next;
					if (mFront == 0)mBack = 0;
					--n;
					delete node;
				}
			}
			void push_back(const T &x)
			{
				data *node = new data;
				node->data = x;
				node->next = 0;
				node->prev = mBack;
				if (mBack == 0)mFront = node;
				else mBack->next = node;
				mBack = node;
				++n;
			}
			void push_front(const T &x)
			{
				data *node = new data;
				node->data = x;
				node->next = mFront;
				node->prev = 0;
				if (mFront == 0)mBack = node;
				else mFront->prev = node;
				mFront = node;
				++n;
			}
			inline ~list()
			{
			}
			
		private:
			data *mFront;
			data *mBack;
			size_type n;
	};
}

/*@}*/

#endif
