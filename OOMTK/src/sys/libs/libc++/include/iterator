#ifndef LIBCPP_ITERATOR
#define LIBCPP_ITERATOR

/*! \addtogroup libcpp libc++ */
/*@{*/

#include <cstddef>
#include <memory>

namespace std
{
	struct input_iterator_tag{};
	struct output_iterator_tag{};
	struct forward_iterator_tag{};
	struct bidirectional_iterator_tag{};
	struct random_access_iterator_tag{};
	
	template<class T, class Distance>
	struct input_iterator{};
	
	struct output_iterator{};
	
	template<class T, class Distance>
	struct forward_iterator{};
	
	template<class T, class Distance>
	struct bidirectional_iterator{};
	
	template<class T, class Distance>
	struct random_access_iterator{};
	
	/*! The constant iterator fpr sequentual containter (Currently bidirectional)
	*\todo Define a type distance and make it a random-access iterator */
	template<class T, class Container>
	class const_sequential_iterator
	{
		public:
			/*! The constructor
			 *\param[in] x reference to the mContainertainer
			 *\param[in] off offset into the mContainertainer*/
			inline const_sequential_iterator(Container &x, size_t off)
				: mContainer(x), mOffset(off){}
			/*! The copy-constructor */
			inline const_sequential_iterator(const const_sequential_iterator &x)
				: mContainer(x.mContainer), mOffset(x.mOffset){}
			/*! The == operator */
			inline bool operator == (const const_sequential_iterator &x) const
			{
				if (&mContainer != &x.mContainer)return false;
				if (mOffset != x.mOffset)return false;
				return true;
			}
			/*! The != operator */
			inline bool operator != (const const_sequential_iterator &x) const{return !(*this == x);}
			/*! The unary * operator */
			inline const T &operator *() const
			{
				return mContainer[realOffset()];
			}
			/*! The -> operator */
			inline const T &operator ->() const
			{
				return mContainer[realOffset()];
			}
			/*! The prefix ++ operator */
			inline const_sequential_iterator &operator ++ ()
			{
				++mOffset;
				return *this;
			}
			/*! The prefix -- operator */
			inline const_sequential_iterator &operator -- ()
			{
				--mOffset;
				return *this;
			}
			/*! The postfix ++ operator */
			inline const_sequential_iterator operator ++ (int)
			{
				const_sequential_iterator tmp(*this);
				++(*this);
				return tmp;
			}
			/*! The postfix -- operator */
			inline const_sequential_iterator operator -- (int)
			{
				const_sequential_iterator tmp(*this);
				--(*this);
				return tmp;
			}
			/*! The += operator */
			inline const_sequential_iterator &operator += (int n)
			{
				if (n >= 0)while(n--)++(*this);
				else while(n++)--(*this);
				return *this;
			}
			/*! The -= operator */
			inline const_sequential_iterator &operator -= (int n){return (*this += -n);}
			/*! The + operator */
			inline const_sequential_iterator operator + (int n)
			{
				const_sequential_iterator tmp(*this);
				tmp += n;
				return tmp;
			}
			/*! The - operator */
			inline const_sequential_iterator operator - (int n)
			{
				return (*this + (-n));
			}
			/*! Non-standard: Get the current offset */
			inline size_t getOffset() const{return mOffset;}
			/*! Get the real offset */
			inline size_t realOffset() const
			{
				if (mOffset == 0)return 0;
				//TODO: Throw exception?
				//if (mContainer.size == 0)return 0;
				return (mOffset % mContainer.size());
			}
			/*! Get the container */
			const Container &container() const{return mContainer;}
			/*! Get the offset */
			const size_t &offset() const{return mOffset;}
			/*! Get the container */
			Container &container(){return mContainer;}
			/*! Get the offset */
			size_t &offset(){return mOffset;}
		protected:
			/*! The = operator */
			inline const_sequential_iterator &operator = (const const_sequential_iterator &x)
			{
				mOffset = x.mOffset;
				mContainer = x.mContainer;
				return *this;
			}
		private:
			/*! Reference to the Container */
			Container &mContainer;
			/*! Current offset */
			size_t mOffset;
	};
	
	/*! The tterator for a sequential mContainertainer (Currently bidirectional)
	 *\todo Define a type distance and make it a random-access iterator */
	template<class T, class Container>
	class sequential_iterator : public const_sequential_iterator<T, Container>
	{
		public:
			/*! The constructor
			 *\param[in] x reference to the mContainertainer
			 *\param[in] off offset into the mContainertainer*/
			inline sequential_iterator(Container &x, size_t off)
				: const_sequential_iterator<T, Container>(x, off){}
			/*! The copy-constructor */
			inline sequential_iterator(const sequential_iterator &x)
				: const_sequential_iterator<T, Container>(x){}
			/*! The copy-constructor */
			inline sequential_iterator(const const_sequential_iterator<T, Container> &x)
				: const_sequential_iterator<T, Container>(x){}
			/*! The = operator */
			inline sequential_iterator &operator = (const sequential_iterator &x)
			{
				const_sequential_iterator<T, Container>::container() = x.const_sequential_iterator<T, Container>::container();
				const_sequential_iterator<T, Container>::offset() = x.const_sequential_iterator<T, Container>::offset();
				return *this;
			}
			/*! The = operator */
			inline sequential_iterator &operator = (const const_sequential_iterator<T, Container> &x)
			{
				const_sequential_iterator<T, Container>::container() = x.container();
				const_sequential_iterator<T, Container>::offset() = x.offset();
				return *this;
			}
			/*! The unary * operator */
			inline T &operator *()
			{
				return const_sequential_iterator<T, Container>::container()[const_sequential_iterator<T, Container>::realOffset()];
			}
			/*! The -> operator */
			inline T &operator ->()
			{
				return const_sequential_iterator<T, Container>::container()[const_sequential_iterator<T, Container>::realOffset()];
			}
			/*! The prefix ++ operator */
			inline sequential_iterator &operator ++ ()
			{
				++const_sequential_iterator<T, Container>::offset();
				return *this;
			}
			/*! The prefix -- operator */
			inline sequential_iterator &operator -- ()
			{
				--const_sequential_iterator<T, Container>::offset();
				return *this;
			}
			/*! The postfix ++ operator */
			inline sequential_iterator operator ++ (int)
			{
				sequential_iterator tmp(*this);
				++(*this);
				return tmp;
			}
			/*! The postfix -- operator */
			inline sequential_iterator operator -- (int)
			{
				sequential_iterator tmp(*this);
				--(*this);
				return tmp;
			}
			/*! The += operator */
			inline sequential_iterator &operator += (int n)
			{
				if (n >= 0)while(n--)++(*this);
				else while(n++)--(*this);
				return *this;
			}
			/*! The -= operator */
			inline sequential_iterator &operator -= (int n){return (*this += -n);}
			/*! The + operator */
			inline sequential_iterator operator + (int n)
			{
				sequential_iterator tmp(*this);
				tmp += n;
				return tmp;
			}
			/*! The - operator */
			inline sequential_iterator operator - (int n)
			{
				return (*this + (-n));
			}
	};
};

/*@}*/

#endif
