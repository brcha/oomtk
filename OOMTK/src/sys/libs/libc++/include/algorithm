#ifndef LIBCPP_ALGORITHM
#define LIBCPP_ALGORITHM

/*! \addtogroup libcpp libc++ */
/*@{*/

#include <utility>

namespace std
{
	/*! std::count template function
	 *\param[in] first input iterator to the first value
	 *\param[in] last input iterator to the last value
	 *\param[in] value value to match with
	 *\param[out] n number of elements */
	template<class InputIterator, class T, class Size>
	void count(	InputIterator first,
				InputIterator last,
				const T &value,
				Size &n)
	{
		n = 0;
		for (;first != last;first++)if (*first == value)++n;
	}
	/*! std::equal template function
	 *\todo doc */
	template<class InputIterator1, class InputIterator2>
	bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)
	{
		for (;first1 != last1;first1++)
		{
			if (*first1 != *first2)return false;
			++first2;
		}
		return true;
	}
	/*! std::fill template function
	 *\param[in] first input iterator to the first value
	 *\param[in] last input iterator to the last value
	 *\param[in] value the value */
	template<class ForwardIterator, class T>
	void fill(	ForwardIterator first,
				ForwardIterator last,
				const T &value)
	{
		for (;first != last;first++)*first = value;
	}
	/*! std::fill_n template function
	 *\todo What is returned? */
	template<class OutputIterator, class Size, class T>
	OutputIterator fill_n(	OutputIterator first,
							Size n,
							const T &value)
	{
		for (;n > 0;n--)
		{
			*first = value;
			++first;
		}
		return first;
	}
	/*! std::find template function
	 *\param[in] first input iterator to the first value
	 *\param[in] last input iterator to the last value
	 *\param[in] value value to match with
	 *\return input iterator that points to the element, if one is found, otherwise the returned iterator points to last */
	template<class InputIterator, class T>
	InputIterator find(	InputIterator first,
						InputIterator last,
						const T &value)
	{
		while (first != last)
		{
			if (*first == value)break;
			++first;
		}
		return first;
	}
	/*! std::max template function
	 *\todo doc */
	template<class T>
	inline const T &max(const T &a,
						const T &b)
	{
		return (a < b) ? b : a;
	}
	/*! std::max_element template function
	 *\param[in] first input iterator to the first value
	 *\param[in] last input iterator to the last value
	 *\return input iterator to the greatest value */
	template<class InputIterator>
	InputIterator max_element(	InputIterator first,
								InputIterator last)
	{
		InputIterator max(first);
		for (;first != last;first++)if (*max < *first)max = first;
		return max;
	}
	/*! std::min template function
	 *\todo doc */
	template<class T>
	inline const T &min(const T &a,
						const T &b)
	{
		return (a < b) ? a : b;
	}
	/*! std::min_element template function
	 *\param[in] first input iterator to the first value
	 *\param[in] last input iterator to the last value
	 *\return input iterator to the smallest value */
	template<class InputIterator>
	InputIterator min_element(	InputIterator first,
								InputIterator last)
	{
		InputIterator min(first);
		for (;first != last;first++)if (*min > *first)min = first;
		return min;
	}
	/*! std::mismatch template function
	 *\todo doc */
	template<class InputIterator1, class InputIterator2>
	pair<InputIterator1,InputIterator2> mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)
	{
		for (;first1 != last1;first1++)
		{
			if (*first1 != *first2)break;
			++first2;
		}
		return pair<InputIterator1,InputIterator2>(first1,first2);
	}
	/*! std::swap template function
	 *\param[in] a reference to the first value
	 *\param[in] b reference to the second value */
	template<class T>
	inline void swap(T &a, T &b)
	{
		T tmp(a);
		a = b;
		b = tmp;
	}
	/*! std::swap_ranges template function
	 *\todo doc */
	template<class ForwardIterator1, class ForwardIterator2>
	ForwardIterator2 swap_ranges(	ForwardIterator1 first1,
									ForwardIterator1 last1,
									ForwardIterator2 first2)
	{
		for (;first1 != last1;first1++)
		{
			swap(*first1, *first2);
			++first2;
		}
		return first2;
	}
};

/*@}*/

#endif
